<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="reference:template" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Neo4jTemplate</title>
    <para>
        The <code>Neo4jTemplate</code> offers the convenient API of Spring templates for the Neo4j graph
        database.
    </para>

    <xi:include href="../snippets/SnippetNeo4jTemplateMethods.xml"/>
    <section>
        <title>Result</title>
        <para>
            All querying methods of the template return a uniform result type: <code>Result&lt;T&gt;</code>
            which is also an <code>Iterable&lt;T&gt;</code>. The query result offers methods of converting each
            element to a target type <code>result.to(Type.class)</code> optionally supplying a
            <code>ResultConverter&lt;FROM,TO&gt;</code> which takes care of custom conversions. By default most
            query methods can already handle conversions from and to: Paths, Nodes, Relationship and GraphEntities
            as well as conversions backed by registered ConversionServices. A converted <code>Result&lt;FROM&gt;</code> is an
            <code>Iterable&lt;TO&gt;</code>. Results can be limited to a single value using the <code>result.single()</code>
            method. It also offers support for a pure callback function using a <code>Handler&lt;T&gt;</code>.
        </para>
    </section>
    <section>
        <title>Indexing</title>
        <para>
            Adding nodes and relationships to an index is done with the <code>index()</code> method.
        </para>
        <para>
            The <code>lookup()</code> methods either take a field/value combination to look for exact matches in the
            index, or a Lucene query object or string to handle more complex queries. All <code>lookup()</code>
            methods return a <code>Result&lt;PropertyContainer&gt;</code> to be used or transformed.
        </para>
    </section>
    <section>
        <title>Graph traversal</title>
        <para>
            The traversal methods are at the core of graph operations.
            The <code>traverse()</code> method covers the full traversal operation that takes a
            <code>TraversalDescription</code> (typically built with the <code>Traversal.description()</code>
            DSL) and runs it from the given start node. <code>traverse</code> returns a <code>Result&lt;Path&gt;</code>
            to be used or transformed.
        </para>
    </section>
    <section>
        <title>Cypher Queries</title>
        <para>
            The <code>Neo4jTemplate</code> also allows execution of arbitrary Cypher queries. Via the <code>query</code>
            methods the statement and parameter-Map are provided. Cypher Queries return tabular results, so the
            <code>Result&lt;Map&lt;String,Object&gt;&gt;</code> contains the rows which can be either used as they are
            or converted as needed.
        </para>
    </section>
    <section>
        <title>Gremlin Scripts</title>
        <para>
            Gremlin Scripts can run with the <code>execute</code> method, which also takes the parameters that will be
            available as variables inside the script. The result of the executions is a generic
            <code>Result&lt;Object&gt;</code> fit for conversion or usage.
        </para>
    </section>
    <section>
        <title>Transactions</title>
        <para>
            The <code>Neo4jTemplate</code> provides configurable implicit transactions for all its methods. By
            default it creates a transaction for each call (which is a no-op if there is already a transaction
            running). If you call the constructor with the <code>useExplicitTransactions</code> parameter set to
            true, it won't create any transactions so you have to provide them using <code>@Transactional</code>
            or the <code>TransactionTemplate</code>.
        </para>
    </section>
    <section>
        <title>Neo4j REST Server</title>
        <para>If the template is configured to use a <code>RestGraphDatabase</code> the expensive operations
        like traversals and querying are executed efficiently on the server side by using the REST API to forward
        those calls. All the other template methods require single network operations.
        </para>
    </section>
</chapter>
