<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="reference:programming-model:typerepresentationstrategy">
    <title>Entity type representation</title>
    <para>
        There are several ways to represent the Java type hierarchy of the data model in the graph. In general, for all
        node and relationship entities, type information is needed to perform certain repository operations. Some of
        this type information is saved in the graph database.
    </para>
    <para>
        Implementations of <code>TypeRepresentationStrategy</code> take care of persisting this information during entity instance
        creation. They also provide the repository methods that use this type information to perform their operations,
        like <code>findAll</code> and <code>count</code>. The derived finderMethods also use the type information for graph global queries.
    </para>
    <para>
        There are three available implementations for node entities to choose from.
        <itemizedlist>
            <listitem>
                <para>
                    <code>IndexingNodeTypeRepresentationStrategy</code> this is the default strategy used.
                </para>
                <para>
                    Stores entity types in the integrated index. Each entity node gets indexed with its type and
                    any supertypes that are also<code>@NodeEntity</code>-annotated. The special index used for this
                    is called<code>__types__</code>. Additionally, in order to get the type of an entity node, each
                    node has a property
                    <code>__type__</code>
                    with the fully qualified type of that entity.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>SubReferenceNodeTypeRepresentationStrategy</code>
                </para>
                <para>
                    Stores entity types in a tree in the graph representing the type hierarchy. Each entity
                    has a INSTANCE_OF relationship to a type node representing that entity's type. The type may or
                    may not have a SUBCLASS_OF relationship to another type node.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>NoopNodeTypeRepresentationStrategy</code>
                </para>
                <para>
                    Does not store any type information, and does hence not support finding by type, counting by type,
                    or retrieving the type of any entity.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        There are two implementations for relationship entities available, same behavior as the corresponding ones
        above:
        <itemizedlist>
            <listitem>
                <para>
                    <code>IndexingRelationshipTypeRepresentationStrategy</code>
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>NoopRelationshipTypeRepresentationStrategy</code>
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        Spring Data Neo4j will by default autodetect which are the most suitable strategies for node and relationship
        entities. For new data stores, it will always opt for the indexing strategies. If a data store was created
        with the older<code>SubReferenceNodeTypeRepresentationStrategy</code>, then it will continue to use that
        strategy for node entities. It will however in that case use the no-op strategy for relationship entities,
        which means that the old data stores have no support for searching for relationship entities. The indexing
        strategies are recommended for all new users.
    </para>
</section>
