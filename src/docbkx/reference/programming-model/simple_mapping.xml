<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="reference:simple-mapping">
    <title>Simple Object Graph Mapping</title>
    <para>
        In addition to the advanced object graph mapping using AspectJ, Spring Data Neo4j also supports a simpler mode
        that converts graph data into domain objects and vice versa. It does not require any additional set up and should
        work out of the box. The simple mapping approach uses the same annotations (<xref linked="reference:programming-model:annotations"/>)
        as the advanced mapping to declare mapping meta-information.
    </para>
    <para>
		The simple object graph mapping comes into play whenever an entity is constructed from a node or relationship.
		This could be done explicitly like during the lookup- or create-operations of the repositories and the
        <code>Neo4jTemplate</code> but also implicitly while executing
		any graph operation that returns nodes or relationships and expecting mapped entities to be returned.
	</para>
	<para>
		It uses the available meta-information about the persistent entity to iterate over its properties and relationships,
		fetching their data from the graph while doing so. It also executes computed fields and stores the resulting values
		in the properties. 
	</para>
	<para>
		We try to avoid loading the whole graph into memory by not following relationships eagerly. A dedicated
		<code>@Fetch</code> annotation controls instead if related entities are loaded or not. 
		Whenever an entity is not fully loaded, then only its id is stored. Those
		entities or collections of entities can then later be loaded explicitly using the <code>template.fetch()</code> operation.
	</para>
    <para>
        The additional fetch information is stored in a <code>MappingPolicy</code> which can be retrieved via the <code>Neo4jTemplate</code>
        for classes. Both <code>Neo4jPersistentEntitity</code> as well as <code>Neo4jPersistentProperty</code> provide access to that
        information on their scope.
    </para>
	<note>
    <para>
		Please note that if you have two collections in an entity pointing to the same relationship and one of them has data and the other is
		empty due to the nature of persisting it, one will override the other in the graph so that you might end up with no data. If you want
		a relationship-collection to be ignored on save set it to null.
	</para>
	</note>
	<para>
		<example>
			<title>Examples for loading entities from the graph</title>
<programlisting language="java"><![CDATA[
  @Autowired Neo4jOperations template;


  @NodeEntity class Person {
    String name;
    @Fetch Person boss;
    Person spouse;

    @RelatedTo(type = "FRIEND", direction = BOTH)
    @Fetch Set<Person> friends;
  }
  Person person = template.findOne(personId);
  assertNotNull(person.getBoss().getName());

  assertNotNull(person.getSpouse().getId());
  assertNull(person.getSpouse().getName());

  template.fetch(person.getSpouse());
  assertNotNull(person.getSpouse().getName());

  assertEquals(10,person.getFriends().size());
  assertNotNull(firstFriend.getName());
]]></programlisting>
</example>
</para>
    <para>
        <note>
            Both the simple mapping approach as well as the fetch strategies (<code>MappingPolicy</code>) debuted in Spring Data Neo4j 2.0.
            So there might be rough edges and there are certainly many areas for improvement and extension. We look forward to your feedback
            on this topic.
        </note>
    </para>
    <para>
        As we tried to encapsulate each aspect of the mapping process into a separate class the resulting fabric of responsibilities is quite
        intricate. All of them are set up in the <code>MappingInfrastructure</code> that is part of the <code>Neo4jTemplate</code> setup.
        <!-- todo list classes and responsibilities, how to discuss extension / modification of behaviour ?? -->
    </para>
</section>
